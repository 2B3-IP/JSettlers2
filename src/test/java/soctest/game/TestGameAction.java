/**
 * Java Settlers - An online multiplayer version of the game Settlers of Catan
 * This file Copyright (C) 2022 Jeremy D Monin <jeremy@nand.net>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The maintainer of this program can be reached at jsettlers@nand.net
 **/

package soctest.game;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

import java.util.HashMap;

import org.junit.Test;

import soc.game.GameAction;
import soc.game.GameAction.ActionType;
import soc.game.SOCResourceSet;

/**
 * A few tests for {@link GameAction}.
 * @since 2.7.00
 */
public class TestGameAction
{

    /**
     * Test {@link GameAction#toString()} for expected output formats.
     */
    @Test
    public void testToString()
    {
        assertEquals("GameAction(UNKNOWN)", new GameAction(ActionType.UNKNOWN).toString());
        assertEquals("GameAction(ROLL_DICE, p1=7)", new GameAction(ActionType.ROLL_DICE, 7, 0, 0).toString());
        assertEquals("GameAction(ROLL_DICE, p1=7, p2=0, p3=1)", new GameAction(ActionType.ROLL_DICE, 7, 0, 1).toString());
        assertEquals("GameAction(BUILD_PIECE, p1=1, p2=3, p3=33)", new GameAction(ActionType.BUILD_PIECE, 1, 3, 33).toString());
        assertEquals("GameAction(BUILD_PIECE, p1=1, p2=3, p3=33, rs1=clay=1|ore=0|sheep=0|wheat=0|wood=2|unknown=0)",
            new GameAction(ActionType.BUILD_PIECE, 1, 3, 33, new SOCResourceSet(1, 0, 0, 0, 2, 0), null).toString());
        assertEquals("GameAction(BUILD_PIECE, p1=1, p2=3, p3=33, rs1=null, rs2=clay=1|ore=0|sheep=0|wheat=0|wood=2|unknown=0)",
            new GameAction(ActionType.BUILD_PIECE, 1, 3, 33, null, new SOCResourceSet(1, 0, 0, 0, 2, 0)).toString());
        assertEquals("GameAction(CHOOSE_FREE_RESOURCES, rs1=clay=0|ore=1|sheep=0|wheat=1|wood=0|unknown=0)",
            new GameAction(ActionType.CHOOSE_FREE_RESOURCES, new SOCResourceSet(0, 1, 0, 1, 0, 0), null).toString());
    }

    /**
     * Test the {@link ActionType} enum's {@link ActionType#valueOf(int)} method
     * and {@link ActionType#value} uniqueness.
     *<P>
     * Before v2.7.00 this was in {@link soctest.robot.TestGameActionExtractor}.
     */
    @Test
    public void testBasicsActionEnum()
    {
        assertEquals(0, ActionType.UNINITIALIZED.value);
        assertEquals(1, ActionType.UNKNOWN.value);
        assertEquals(40, ActionType.BUILD_PIECE.value);  // BUILD_PIECE mentioned in .value javadoc

        assertEquals(ActionType.UNINITIALIZED, ActionType.valueOf(0));
        assertEquals(ActionType.UNKNOWN, ActionType.valueOf(1));
        assertEquals(ActionType.BUILD_PIECE, ActionType.valueOf(40));
        assertNull(ActionType.valueOf(-1));

        // for completeness, test autogenerated valueOf(String)
        assertEquals(ActionType.UNINITIALIZED, ActionType.valueOf("UNINITIALIZED"));
        assertEquals(ActionType.UNKNOWN, ActionType.valueOf("UNKNOWN"));
        assertEquals(ActionType.BUILD_PIECE, ActionType.valueOf("BUILD_PIECE"));
        try
        {
            ActionType.valueOf("NOT_A_DECLARED_CONSTANT");
            fail("ActionType.valueOf(\"??\") should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException e) {}

        final HashMap<Integer, ActionType> typeValues = new HashMap<>();
        for (ActionType t : ActionType.values())
        {
            final Integer ival = Integer.valueOf(t.value);
            ActionType entry = typeValues.get(ival);
            if (entry != null)
                fail("ActionType: dupe value " + ival + " for " + t + " and " + entry);
            else
                typeValues.put(ival, t);
        }
    }

}
